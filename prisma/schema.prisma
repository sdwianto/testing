// This is your Prisma schema file for NextGen ERP System
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Updated for P1: Core Platform & Offline Backbone

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL") // untuk query
    directUrl = env("DIRECT_URL") // untuk sync ke db supabase (optional)
}

// ========================================
// CORE SYSTEM & SECURITY (P1 - Multi-tenant)
// ========================================

model Tenant {
    id                String   @id @default(uuid())
    name              String
    code              String   @unique
    domain            String?  @unique
    isActive          Boolean  @default(true)
    settings          Json?    // Tenant-specific settings
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    
    // Relations
    users             User[]
    auditEvents       AuditEvent[]
    outboxEvents      OutboxEvent[]
    idempotencyLogs   IdempotencyLog[]
    equipment         Equipment[]
    usageLogs         UsageLog[]
    breakdowns        Breakdown[]
    workOrders        WorkOrder[]
    workOrderItems    WorkOrderItem[]
    workOrderHistory  WorkOrderHistory[]
    maintenanceSchedules MaintenanceSchedule[]
    equipmentSpecs    EquipmentSpec[]
    equipmentDocuments EquipmentDocument[]
    lifecycleEvents   LifecycleEvent[]
    equipmentRentals  EquipmentRental[]
    rentalBills       RentalBill[]
    rentalUsage       RentalUsage[]
    items             Item[]
    itemBranches      ItemBranch[]
    itemLocations     ItemLocation[]
    inventoryTxs      InventoryTx[]
    customers         Customer[]
    orders            Order[]
    customerContacts  CustomerContact[]
    syncLogs          SyncLog[]
    posts             Post[]
    notifications     Notification[]
    systemConfigs     SystemConfig[]
    purchaseRequests  PurchaseRequest[]
    purchaseRequestItems PurchaseRequestItem[]
    purchaseOrders    PurchaseOrder[]
    purchaseOrderItems PurchaseOrderItem[]
    partsList         PartsList[]
    labourInstructions LabourInstructions[]
    qualityInspections QualityInspection[]
    maintenanceStatusHistory MaintenanceStatusHistory[]
    workOrderApprovals WorkOrderApproval[]
    predictiveMaintenance PredictiveMaintenance[]
    maintenanceEfficiency MaintenanceEfficiency[]
    routingInstructions RoutingInstructions[]
    payrollTimeEntries PayrollTimeEntry[]
    modelWorkOrders   ModelWorkOrder[]
    workOrderProgress  WorkOrderProgress[]
}

model User {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    clerkId           String   @unique // External Clerk ID
    email             String   @unique
    firstName         String
    lastName          String
    phone             String?
    avatar            String?
    isActive          Boolean  @default(true)
    lastLoginAt       DateTime?
    
    // Version field for conflict resolution (R4)
    version           Int      @default(1)
    
    // Role-based access control
    roleId            String
    role              Role     @relation(fields: [roleId], references: [id])
    
    // Department assignment
    departmentId      String?
    department        Department? @relation(fields: [departmentId], references: [id])
    
    // Audit fields
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    createdBy         String?
    updatedBy         String?
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    posts             Post[]
    auditEvents       AuditEvent[]
    createdOrders     Order[]  @relation("OrderCreator")
    approvedOrders    Order[]  @relation("OrderApprover")
    customerContacts  CustomerContact[]
    notifications     Notification[]
    purchaseRequests  PurchaseRequest[] @relation("PurchaseRequestRequester")
    approvedPurchaseRequests PurchaseRequest[] @relation("PurchaseRequestApprover")
    createdPurchaseOrders PurchaseOrder[] @relation("PurchaseOrderCreator")
    updatedPurchaseOrders PurchaseOrder[] @relation("PurchaseOrderUpdater")
    assignedWorkOrders   WorkOrder[] @relation("AssignedTechnician")
    labourInstructions   LabourInstructions[] @relation("LabourInstructionsAssignedTo")
    qualityInspections   QualityInspection[] @relation("QualityInspectionsInspector")
    workOrderApprovals   WorkOrderApproval[] @relation("WorkOrderApprovalsApprover")
    payrollTimeEntries   PayrollTimeEntry[] @relation("PayrollTimeEntryEmployee")
    
    @@index([tenantId, email]) // Composite index (R2, R8)
    @@index([tenantId, isActive, createdAt]) // For tenant-scoped queries
}

model Role {
    id                String   @id @default(uuid())
    name              String   @unique
    description       String?
    permissions       Json     // Array of permission strings
    isActive          Boolean  @default(true)
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    
    // Relations
    users             User[]
}

model Department {
    id                String   @id @default(uuid())
    name              String   @unique
    code              String   @unique
    description       String?
    managerId         String?
    isActive          Boolean  @default(true)
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    
    // Relations
    users             User[]
    purchaseRequests  PurchaseRequest[]
}

// ========================================
// AUDIT & EVENT SOURCING (P1 - Append-only)
// ========================================

model AuditEvent {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    actorId           String?  // User who performed the action
    entity            String   // Entity type (User, Order, etc.)
    entityId          String   // Entity ID
    action            String   // created|updated|deleted|approved|posted|...
    changes           Json?    // Old/new values
    createdAt         DateTime @default(now())
    hash              String   // Tamper-evidence (R12)
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    actor             User?    @relation(fields: [actorId], references: [id])
    
    @@index([tenantId, createdAt]) // For tenant-scoped audit queries
    @@index([tenantId, entity, entityId]) // For entity-specific audit
}

// ========================================
// OUTBOX PATTERN (P1 - Event Sourcing)
// ========================================

model OutboxEvent {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    type              String   // Event type (e.g., "user.created", "order.updated")
    entity            String   // Entity type
    entityId          String   // Entity ID
    version           Int      // Entity version for ordering
    payload           Json     // Event payload
    createdAt         DateTime @default(now())
    delivered         Boolean  @default(false) // Delivery status
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    
    @@index([tenantId, delivered, createdAt]) // For delivery processing
    @@index([tenantId, type, createdAt]) // For event type queries
}

// ========================================
// IDEMPOTENCY (P1 - R4)
// ========================================

model IdempotencyLog {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    key               String   // Idempotency key
    hash              String   // Request hash for deduplication
    result            Json?    // Stored result
    committedAt       DateTime @default(now())
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    
    @@unique([tenantId, key]) // Unique per tenant
    @@index([tenantId, committedAt]) // For cleanup
}

// ========================================
// OPERATIONS (P1 - Equipment & Usage)
// ========================================

model Equipment {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    code              String   @unique
    name              String   // Equipment name
    type              String   // Equipment type
    category          String   // Equipment category
    description       String?
    
    // Technical Specifications (JDE F1201 equivalent)
    manufacturer      String?
    model             String?
    serialNumber      String?
    yearOfManufacture Int?
    specifications    Json?    // Flexible specifications storage
    
    // Location & Status
    currentSiteId     String?  // Current location
    currentStatus     String   @default("ACTIVE") // ACTIVE, INACTIVE, MAINTENANCE, REPAIR, DISPOSED
    parentEquipmentId String?  // Equipment hierarchy
    
    // Financial Information
    acquisitionCost   Decimal  @db.Decimal(14,2) // Money field (R8)
    currentValue      Decimal  @db.Decimal(14,2) // Money field (R8)
    depreciationMethod String? // STRAIGHT_LINE, DECLINING_BALANCE, etc.
    usefulLife        Int?     // Years
    
    // Performance Metrics
    utilizationRate   Decimal  @db.Decimal(5,2) @default(0) // Percentage
    availabilityRate  Decimal  @db.Decimal(5,2) @default(0) // Percentage
    totalHours        Decimal  @db.Decimal(10,2) @default(0) // Total operating hours
    
    isActive          Boolean  @default(true)
    
    // Version field for conflict resolution (R4)
    version           Int      @default(1)
    
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    parentEquipment   Equipment? @relation("EquipmentHierarchy", fields: [parentEquipmentId], references: [id])
    childEquipment    Equipment[] @relation("EquipmentHierarchy")
    usageLogs         UsageLog[]
    breakdowns        Breakdown[]
    workOrders        WorkOrder[]
    equipmentRentals  EquipmentRental[]
    maintenanceSchedules MaintenanceSchedule[]
    equipmentSpecs    EquipmentSpec[]
    equipmentDocuments EquipmentDocument[]
    lifecycleEvents   LifecycleEvent[]
    maintenanceStatusHistory MaintenanceStatusHistory[]
    predictiveMaintenance PredictiveMaintenance[]
    maintenanceEfficiency MaintenanceEfficiency[]
    payrollTimeEntries PayrollTimeEntry[]
    
    @@index([tenantId, code]) // Composite index (R2, R8)
    @@index([tenantId, isActive, type]) // For equipment queries
    @@index([tenantId, currentStatus]) // For status-based queries
    @@index([tenantId, parentEquipmentId]) // For hierarchy queries
}

model UsageLog {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    equipmentId       String
    shiftDate         DateTime
    hoursUsed         Decimal  @db.Decimal(8,2) // Usage hours
    loadUnits         Decimal  @db.Decimal(8,2) @default(0) // Load units
    operatorId        String?  // Operator user ID
    notes             String?
    createdAt         DateTime @default(now())
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    equipment         Equipment @relation(fields: [equipmentId], references: [id])
    
    @@index([tenantId, equipmentId, shiftDate]) // For equipment usage queries
    @@index([tenantId, shiftDate]) // For date-based queries
}

// Equipment Specifications (JDE F1201 equivalent)
model EquipmentSpec {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    equipmentId       String
    specType          String   // DIMENSIONS, CAPACITY, POWER, PERFORMANCE, etc.
    specName          String   // Specification name
    specValue         String   // Specification value
    specUnit          String?  // Unit of measurement
    isActive          Boolean  @default(true)
    
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    equipment         Equipment @relation(fields: [equipmentId], references: [id])
    
    @@index([tenantId, equipmentId, specType]) // For equipment spec queries
}

// Equipment Documents (manuals, certificates, etc.)
model EquipmentDocument {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    equipmentId       String
    documentType      String   // MANUAL, CERTIFICATE, WARRANTY, INSPECTION, etc.
    documentName      String
    documentUrl       String?  // File URL
    documentContent   String?  // Text content
    issueDate         DateTime?
    expiryDate        DateTime?
    isActive          Boolean  @default(true)
    
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    equipment         Equipment @relation(fields: [equipmentId], references: [id])
    
    @@index([tenantId, equipmentId, documentType]) // For equipment document queries
}

// Work Orders (JDE F4801 equivalent)
model WorkOrder {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    workOrderNumber   String   @unique // Auto-generated work order number
    equipmentId       String
    workOrderType     String   // PREVENTIVE, CORRECTIVE, EMERGENCY, INSPECTION
    priority          String   @default("MEDIUM") // LOW, MEDIUM, HIGH, CRITICAL
    status            String   @default("OPEN") // OPEN, IN_PROGRESS, COMPLETED, CANCELLED
    
    // Work Order Details
    title             String
    description       String?
    problemDescription String?
    
    // Scheduling
    scheduledDate     DateTime?
    startDate         DateTime?
    completedDate     DateTime?
    estimatedDuration Int?     // Hours
    
    // Cost Tracking
    estimatedCost     Decimal  @db.Decimal(14,2) @default(0)
    actualCost        Decimal  @db.Decimal(14,2) @default(0)
    laborCost         Decimal  @db.Decimal(14,2) @default(0)
    partsCost         Decimal  @db.Decimal(14,2) @default(0)
    materialCost      Decimal  @db.Decimal(14,2) @default(0)
    
    // Resource Allocation
    assignedTechnicianId String?
    assignedTeamId    String?
    requiredTools     Json?    // Array of required tools
    requiredParts     Json?    // Array of required parts
    
    // Performance Tracking
    downtimeHours     Decimal  @db.Decimal(8,2) @default(0)
    repairTime        Decimal  @db.Decimal(8,2) @default(0)
    
    // Completion Details
    workPerformed     String?
    rootCause         String?
    recommendations   String?
    
    isActive          Boolean  @default(true)
    
    // Version field for conflict resolution (R4)
    version           Int      @default(1)
    
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    equipment         Equipment @relation(fields: [equipmentId], references: [id])
    assignedTechnician User?   @relation("AssignedTechnician", fields: [assignedTechnicianId], references: [id])
    workOrderItems    WorkOrderItem[]
    workOrderHistory  WorkOrderHistory[]
    partsList         PartsList[]
    labourInstructions LabourInstructions[]
    qualityInspections QualityInspection[]
    workOrderApprovals WorkOrderApproval[]
    routingInstructions RoutingInstructions[]
    payrollTimeEntries PayrollTimeEntry[]
    workOrderProgress  WorkOrderProgress[]
    
    @@index([tenantId, workOrderNumber]) // For work order queries
    @@index([tenantId, equipmentId, status]) // For equipment work order queries
    @@index([tenantId, status, scheduledDate]) // For scheduling queries
}

// Work Order Items (parts, materials, etc.)
model WorkOrderItem {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    workOrderId       String
    itemType          String   // PART, MATERIAL, TOOL, LABOR
    itemId            String?  // Reference to item (if applicable)
    itemName          String
    itemDescription   String?
    quantity          Decimal  @db.Decimal(10,2)
    unitCost          Decimal  @db.Decimal(14,2) @default(0)
    totalCost         Decimal  @db.Decimal(14,2) @default(0)
    
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    workOrder         WorkOrder @relation(fields: [workOrderId], references: [id])
    
    @@index([tenantId, workOrderId, itemType]) // For work order item queries
}

// Work Order History (audit trail)
model WorkOrderHistory {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    workOrderId       String
    action            String   // CREATED, ASSIGNED, STARTED, COMPLETED, etc.
    description       String?
    performedBy       String?  // User ID
    performedAt       DateTime @default(now())
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    workOrder         WorkOrder @relation(fields: [workOrderId], references: [id])
    
    @@index([tenantId, workOrderId, performedAt]) // For work order history queries
}

// Maintenance Schedules (JDE F1301 equivalent)
model MaintenanceSchedule {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    equipmentId       String
    scheduleName      String
    maintenanceType   String   // PREVENTIVE, PREDICTIVE, CONDITION_BASED
    frequencyType     String   // HOURS, DAYS, WEEKS, MONTHS
    frequencyValue    Int      // Frequency value
    lastMaintenanceDate DateTime?
    nextMaintenanceDate DateTime
    estimatedDuration Int?     // Hours
    estimatedCost     Decimal  @db.Decimal(14,2) @default(0)
    
    // Maintenance Tasks
    maintenanceTasks  Json?    // Array of maintenance tasks
    requiredParts     Json?    // Array of required parts
    requiredTools     Json?    // Array of required tools
    
    isActive          Boolean  @default(true)
    
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    equipment         Equipment @relation(fields: [equipmentId], references: [id])
    
    @@index([tenantId, equipmentId, nextMaintenanceDate]) // For maintenance scheduling queries
    @@index([tenantId, nextMaintenanceDate]) // For upcoming maintenance queries
}

// Equipment Lifecycle Events (JDE F1201 equivalent)
model LifecycleEvent {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    equipmentId       String
    eventType         String   // ACQUISITION, DEPLOYMENT, TRANSFER, MAINTENANCE, UPGRADE, DISPOSAL
    eventDate         DateTime
    description       String?
    cost              Decimal  @db.Decimal(14,2) @default(0) // Event cost
    location          String?  // Event location
    vendor            String?  // Vendor/supplier
    notes             String?  // Additional notes
    
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    equipment         Equipment @relation(fields: [equipmentId], references: [id])
    
    @@index([tenantId, equipmentId, eventDate]) // For equipment lifecycle queries
    @@index([tenantId, eventType, eventDate]) // For event type queries
    @@index([tenantId, eventDate]) // For date-based lifecycle queries
}

model Breakdown {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    equipmentId       String
    startAt           DateTime
    endAt             DateTime?
    reason            String?
    notes             String?
    reportedBy        String?  // User who reported
    resolvedBy        String?  // User who resolved
    createdAt         DateTime @default(now())
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    equipment         Equipment @relation(fields: [equipmentId], references: [id])
    
    @@index([tenantId, equipmentId, startAt]) // For equipment breakdown queries
    @@index([tenantId, startAt]) // For date-based breakdown queries
}

// ========================================
// JDE F4801/F1301 ADVANCED FEATURES
// ========================================

// Parts List (JDE F3111 equivalent)
model PartsList {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    workOrderId       String
    componentNumber   String   // Part/component number
    componentBranchId String?  // Branch ID for the component
    description       String
    quantity          Decimal  @db.Decimal(10,2)
    unitCost          Decimal  @db.Decimal(14,2) @default(0)
    totalCost         Decimal  @db.Decimal(14,2) @default(0)
    
    // Component details
    componentType     String   // PART, MATERIAL, TOOL, CONSUMABLE
    isRequired        Boolean  @default(true)
    isAvailable       Boolean  @default(true)
    location          String?  // Storage location
    
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    workOrder         WorkOrder @relation(fields: [workOrderId], references: [id])
    
    @@index([tenantId, workOrderId, componentNumber]) // For parts list queries
}

// Labour Instructions (JDE F3112 equivalent)
model LabourInstructions {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    workOrderId       String
    craftType         String   // MECHANIC, ELECTRICIAN, WELDER, etc.
    operationSequence Int      // Sequence number
    workCentre        String?  // Work centre code
    operationDescription String
    estimatedHours    Decimal  @db.Decimal(8,2) @default(0)
    actualHours       Decimal  @db.Decimal(8,2) @default(0)
    
    // Skill requirements
    skillLevel        String   // BASIC, INTERMEDIATE, ADVANCED, EXPERT
    requiredCertification String?
    
    // Status tracking
    status            String   @default("PENDING") // PENDING, IN_PROGRESS, COMPLETED
    assignedTo        String?  // User ID
    startedAt         DateTime?
    completedAt       DateTime?
    
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    workOrder         WorkOrder @relation(fields: [workOrderId], references: [id])
    assignedUser      User?    @relation("LabourInstructionsAssignedTo", fields: [assignedTo], references: [id])
    
    @@index([tenantId, workOrderId, operationSequence]) // For labour instruction queries
}

// Quality Management (JDE F3701/F3702/F3703/F3711 equivalent)
model QualityInspection {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    workOrderId       String
    inspectionType    String   // PRE_WORK, IN_PROGRESS, POST_WORK, FINAL
    inspectionDate    DateTime
    inspectorId       String   // User ID of inspector
    
    // Inspection details
    specificationData Json?    // Inspection specifications
    testData          Json?    // Test data and measurements
    testResults       Json?    // Test results and outcomes
    
    // Quality metrics
    passFail          Boolean? // Pass/Fail result
    qualityScore      Decimal? @db.Decimal(5,2) // Quality score (0-100)
    defectsFound      Json?    // Array of defects found
    correctiveActions Json?    // Corrective actions taken
    
    // Documentation
    inspectionNotes   String?
    photos            Json?    // Array of photo URLs
    certificates      Json?    // Array of certificate URLs
    
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    workOrder         WorkOrder @relation(fields: [workOrderId], references: [id])
    inspector         User     @relation("QualityInspectionsInspector", fields: [inspectorId], references: [id])
    
    @@index([tenantId, workOrderId, inspectionType]) // For quality inspection queries
}

// Maintenance Status History (JDE F1307 equivalent)
model MaintenanceStatusHistory {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    equipmentId       String
    dataItem          String   // Status field name
    historicalValue   String   // Previous value
    newValue          String   // New value
    effectiveDate     DateTime
    changeReason      String?  // Reason for change
    changedBy         String?  // User who made the change
    
    createdAt         DateTime @default(now())
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    equipment         Equipment @relation(fields: [equipmentId], references: [id])
    
    @@index([tenantId, equipmentId, effectiveDate]) // For status history queries
}

// Work Order Approval Workflow
model WorkOrderApproval {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    workOrderId       String
    approvalLevel     Int      // Approval level (1, 2, 3, etc.)
    approverId        String   // User ID of approver
    status            String   @default("PENDING") // PENDING, APPROVED, REJECTED
    comments          String?
    approvedAt        DateTime?
    
    // Cost-based routing
    approvalThreshold Decimal? @db.Decimal(14,2) // Cost threshold for this level
    
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    workOrder         WorkOrder @relation(fields: [workOrderId], references: [id])
    approver          User     @relation("WorkOrderApprovalsApprover", fields: [approverId], references: [id])
    
    @@index([tenantId, workOrderId, approvalLevel]) // For approval workflow queries
}

// ========================================
// ADVANCED ANALYTICS & PREDICTIVE MAINTENANCE
// ========================================

// Predictive Maintenance Models
model PredictiveMaintenance {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    equipmentId       String
    modelType         String   // FAILURE_PREDICTION, COST_OPTIMIZATION, EFFICIENCY_ANALYSIS
    modelVersion      String   // Model version for tracking
    predictionDate    DateTime
    predictionHorizon Int      // Days ahead for prediction
    
    // Prediction Results
    failureProbability Decimal @db.Decimal(5,4) // 0.0000 to 1.0000
    predictedFailureDate DateTime?
    confidenceLevel   Decimal @db.Decimal(5,4) // 0.0000 to 1.0000
    riskLevel         String   // LOW, MEDIUM, HIGH, CRITICAL
    
    // Recommended Actions
    recommendedActions Json?    // Array of recommended maintenance actions
    estimatedCost     Decimal  @db.Decimal(14,2) @default(0)
    costBenefitRatio  Decimal  @db.Decimal(8,4) @default(0)
    
    // Model Performance
    modelAccuracy     Decimal? @db.Decimal(5,4) // Model accuracy score
    lastTrainingDate  DateTime?
    
    isActive          Boolean  @default(true)
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    equipment         Equipment @relation(fields: [equipmentId], references: [id])
    
    @@index([tenantId, equipmentId, predictionDate]) // For predictive maintenance queries
    @@index([tenantId, riskLevel, predictionDate]) // For risk-based queries
}

// Maintenance Efficiency Metrics
model MaintenanceEfficiency {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    equipmentId       String
    periodStart       DateTime
    periodEnd         DateTime
    
    // Efficiency Metrics
    mttr              Decimal  @db.Decimal(8,2) @default(0) // Mean Time To Repair (hours)
    mtbf              Decimal  @db.Decimal(8,2) @default(0) // Mean Time Between Failures (hours)
    availability      Decimal  @db.Decimal(5,2) @default(0) // Availability percentage
    utilization       Decimal  @db.Decimal(5,2) @default(0) // Utilization percentage
    oee               Decimal  @db.Decimal(5,2) @default(0) // Overall Equipment Effectiveness
    
    // Cost Metrics
    maintenanceCost   Decimal  @db.Decimal(14,2) @default(0)
    downtimeCost      Decimal  @db.Decimal(14,2) @default(0)
    totalCost         Decimal  @db.Decimal(14,2) @default(0)
    costPerHour       Decimal  @db.Decimal(14,2) @default(0)
    
    // Performance Metrics
    plannedMaintenance Decimal @db.Decimal(5,2) @default(0) // Percentage of planned maintenance
    emergencyMaintenance Decimal @db.Decimal(5,2) @default(0) // Percentage of emergency maintenance
    firstTimeFixRate  Decimal  @db.Decimal(5,2) @default(0) // First time fix rate percentage
    
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    equipment         Equipment @relation(fields: [equipmentId], references: [id])
    
    @@index([tenantId, equipmentId, periodStart]) // For efficiency queries
    @@index([tenantId, periodStart, periodEnd]) // For period-based queries
}

// ========================================
// SHOP FLOOR CONTROL & ROUTING
// ========================================

// Routing Instructions (JDE Shop Floor Control equivalent)
model RoutingInstructions {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    workOrderId       String
    operationSequence Int      // Operation sequence number
    operationCode     String   // Operation code
    operationDescription String
    workCentre        String   // Work centre where operation is performed
    
    // Resource Requirements
    requiredSkills    Json?    // Array of required skills
    requiredTools     Json?    // Array of required tools
    requiredParts     Json?    // Array of required parts
    
    // Time Estimates
    setupTime         Decimal  @db.Decimal(8,2) @default(0) // Setup time in hours
    runTime           Decimal  @db.Decimal(8,2) @default(0) // Run time in hours
    queueTime         Decimal  @db.Decimal(8,2) @default(0) // Queue time in hours
    moveTime          Decimal  @db.Decimal(8,2) @default(0) // Move time in hours
    
    // Actual Times
    actualSetupTime   Decimal  @db.Decimal(8,2) @default(0)
    actualRunTime     Decimal  @db.Decimal(8,2) @default(0)
    actualQueueTime   Decimal  @db.Decimal(8,2) @default(0)
    actualMoveTime    Decimal  @db.Decimal(8,2) @default(0)
    
    // Status Tracking
    status            String   @default("PENDING") // PENDING, IN_PROGRESS, COMPLETED, CANCELLED
    startedAt         DateTime?
    completedAt       DateTime?
    assignedTo        String?  // User ID assigned to this operation
    
    // Quality Control
    qualityCheckRequired Boolean @default(false)
    qualityCheckPassed   Boolean?
    qualityNotes         String?
    
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    workOrder         WorkOrder @relation(fields: [workOrderId], references: [id])
    
    @@index([tenantId, workOrderId, operationSequence]) // For routing queries
    @@index([tenantId, workCentre, status]) // For work centre queries
}

// ========================================
// PAYROLL INTEGRATION & TIME TRACKING
// ========================================

// Payroll Time Entry (JDE F06116/F0618 equivalent)
model PayrollTimeEntry {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    employeeId        String   // Employee ID
    workOrderId       String?  // Associated work order
    equipmentId       String?  // Associated equipment
    
    // Time Tracking
    workDate          DateTime
    startTime         DateTime
    endTime           DateTime
    totalHours        Decimal  @db.Decimal(8,2) // Total hours worked
    overtimeHours     Decimal  @db.Decimal(8,2) @default(0) // Overtime hours
    
    // Work Details
    workType          String   // REGULAR, OVERTIME, HOLIDAY, SICK, VACATION
    workDescription   String?  // Description of work performed
    location          String?  // Work location
    
    // Payroll Integration
    hourlyRate        Decimal  @db.Decimal(14,2) @default(0)
    totalPay          Decimal  @db.Decimal(14,2) @default(0)
    overtimeRate      Decimal  @db.Decimal(14,2) @default(0)
    overtimePay       Decimal  @db.Decimal(14,2) @default(0)
    
    // Status
    status            String   @default("DRAFT") // DRAFT, SUBMITTED, APPROVED, PAID
    approvedBy        String?  // User ID who approved
    approvedAt        DateTime?
    exportedToPayroll Boolean  @default(false)
    payrollExportDate DateTime?
    
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    employee          User     @relation("PayrollTimeEntryEmployee", fields: [employeeId], references: [id])
    workOrder         WorkOrder? @relation(fields: [workOrderId], references: [id])
    equipment         Equipment? @relation(fields: [equipmentId], references: [id])
    
    @@index([tenantId, employeeId, workDate]) // For employee time queries
    @@index([tenantId, workOrderId, workDate]) // For work order time queries
    @@index([tenantId, status, workDate]) // For payroll status queries
}

// ========================================
// ADVANCED WORK ORDER FEATURES
// ========================================

// Model Work Orders (Template Work Orders)
model ModelWorkOrder {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    modelNumber       String   @unique // Model work order number
    modelName         String   // Model work order name
    description       String?
    
    // Work Order Template
    workOrderType     String   // PREVENTIVE, CORRECTIVE, EMERGENCY, INSPECTION
    priority          String   @default("MEDIUM") // LOW, MEDIUM, HIGH, CRITICAL
    estimatedDuration Int?     // Estimated duration in hours
    estimatedCost     Decimal  @db.Decimal(14,2) @default(0)
    
    // Template Details
    standardTasks     Json?    // Array of standard tasks
    requiredParts     Json?    // Array of required parts
    requiredTools     Json?    // Array of required tools
    requiredSkills    Json?    // Array of required skills
    
    // Quality Requirements
    qualityChecks     Json?    // Array of quality check requirements
    safetyRequirements Json?   // Array of safety requirements
    
    // Equipment Applicability
    applicableEquipmentTypes Json? // Array of equipment types this model applies to
    applicableEquipmentModels Json? // Array of equipment models this model applies to
    
    isActive          Boolean  @default(true)
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    
    @@index([tenantId, modelNumber]) // For model work order queries
    @@index([tenantId, workOrderType]) // For work order type queries
}

// Work Order Progress Tracking
model WorkOrderProgress {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    workOrderId       String
    progressDate      DateTime
    progressPercentage Decimal @db.Decimal(5,2) @default(0) // 0.00 to 100.00
    
    // Progress Details
    completedTasks    Json?    // Array of completed tasks
    remainingTasks    Json?    // Array of remaining tasks
    currentPhase      String?  // Current work phase
    nextMilestone     String?  // Next milestone
    
    // Resource Usage
    hoursWorked       Decimal  @db.Decimal(8,2) @default(0)
    partsUsed         Json?    // Array of parts used
    toolsUsed         Json?    // Array of tools used
    
    // Issues and Notes
    issuesEncountered Json?    // Array of issues encountered
    progressNotes     String?  // Progress notes
    updatedBy         String?  // User who updated progress
    
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    workOrder         WorkOrder @relation(fields: [workOrderId], references: [id])
    
    @@index([tenantId, workOrderId, progressDate]) // For progress tracking queries
}



// ========================================
// EQUIPMENT RENTAL MANAGEMENT (JDE F4201-style)
// ========================================

model EquipmentRental {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    rentalNumber      String   @unique // Rental contract number
    equipmentId       String
    customerId        String   // Customer renting the equipment
    
    // Rental period
    startDate         DateTime
    endDate           DateTime?
    actualEndDate     DateTime? // When equipment was actually returned
    
    // Pricing structure
    hourlyRate        Decimal  @db.Decimal(14,2) @default(0) // Money field (R8)
    dailyRate         Decimal  @db.Decimal(14,2) @default(0) // Money field (R8)
    weeklyRate        Decimal  @db.Decimal(14,2) @default(0) // Money field (R8)
    monthlyRate       Decimal  @db.Decimal(14,2) @default(0) // Money field (R8)
    
    // Usage tracking
    hoursUsed         Decimal  @db.Decimal(8,2) @default(0) // Total hours used
    daysUsed          Int      @default(0) // Total days used
    
    // Billing
    totalAmount       Decimal  @db.Decimal(14,2) @default(0) // Money field (R8)
    amountPaid        Decimal  @db.Decimal(14,2) @default(0) // Money field (R8)
    balanceDue        Decimal  @db.Decimal(14,2) @default(0) // Money field (R8)
    
    // Status and workflow
    status            RentalStatus @default(ACTIVE)
    billingStatus     BillingStatus @default(PENDING)
    
    // Location tracking
    pickupLocation    String?  // Where equipment was picked up
    returnLocation    String?  // Where equipment should be returned
    currentLocation   String?  // Current location of equipment
    
    // Contract details
    contractTerms     String?  // Special terms and conditions
    insuranceRequired Boolean  @default(false)
    insuranceAmount   Decimal  @db.Decimal(14,2) @default(0) // Money field (R8)
    
    // Version field for conflict resolution (R4)
    version           Int      @default(1)
    
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    createdBy         String?  // User who created the rental
    updatedBy         String?  // User who last updated
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    equipment         Equipment @relation(fields: [equipmentId], references: [id])
    customer          Customer @relation(fields: [customerId], references: [id])
    rentalBills       RentalBill[]
    rentalUsage       RentalUsage[]
    
    @@index([tenantId, rentalNumber]) // Composite index (R2, R8)
    @@index([tenantId, equipmentId, status]) // For equipment rental queries
    @@index([tenantId, customerId, status]) // For customer rental queries
    @@index([tenantId, status, startDate]) // For rental status queries
}

model RentalBill {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    rentalId          String
    billNumber        String   @unique // Bill number
    billDate          DateTime @default(now())
    dueDate           DateTime
    
    // Billing period
    periodStart       DateTime
    periodEnd         DateTime
    
    // Amounts
    baseAmount        Decimal  @db.Decimal(14,2) @default(0) // Money field (R8)
    usageAmount       Decimal  @db.Decimal(14,2) @default(0) // Money field (R8)
    additionalCharges Decimal  @db.Decimal(14,2) @default(0) // Money field (R8)
    totalAmount       Decimal  @db.Decimal(14,2) @default(0) // Money field (R8)
    
    // Payment tracking
    amountPaid        Decimal  @db.Decimal(14,2) @default(0) // Money field (R8)
    balanceDue        Decimal  @db.Decimal(14,2) @default(0) // Money field (R8)
    
    // Status
    status            BillStatus @default(PENDING)
    paidDate          DateTime?
    
    // Version field for conflict resolution (R4)
    version           Int      @default(1)
    
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    rental            EquipmentRental @relation(fields: [rentalId], references: [id])
    
    @@index([tenantId, rentalId, billDate]) // For rental billing queries
    @@index([tenantId, status, dueDate]) // For billing status queries
}

model RentalUsage {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    rentalId          String
    usageDate         DateTime
    hoursUsed         Decimal  @db.Decimal(8,2) @default(0) // Hours used on this date
    loadUnits         Decimal  @db.Decimal(8,2) @default(0) // Load units on this date
    operatorId        String?  // Operator user ID
    location          String?  // Location where equipment was used
    notes             String?  // Usage notes
    
    createdAt         DateTime @default(now())
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    rental            EquipmentRental @relation(fields: [rentalId], references: [id])
    
    @@index([tenantId, rentalId, usageDate]) // For rental usage queries
    @@index([tenantId, usageDate]) // For date-based usage queries
}

// ========================================
// RENTAL MANAGEMENT ENUMS
// ========================================

enum RentalStatus {
    ACTIVE
    COMPLETED
    CANCELLED
    SUSPENDED
    OVERDUE
}

enum BillingStatus {
    PENDING
    BILLED
    PAID
    OVERDUE
    CANCELLED
}

enum BillStatus {
    PENDING
    SENT
    PAID
    OVERDUE
    CANCELLED
}

// ========================================
// INVENTORY (P1 - Item Master & Transactions)
// ========================================

model Item {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    number            String   @unique // Item number
    description       String
    type              String   // Item type
    stdCost           Decimal  @db.Decimal(14,2) @default(0) // Money field (R8)
    lastCost          Decimal  @db.Decimal(14,2) @default(0) // Money field (R8)
    avgCost           Decimal  @db.Decimal(14,2) @default(0) // Money field (R8)
    isActive          Boolean  @default(true)
    
    // Version field for conflict resolution (R4)
    version           Int      @default(1)
    
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    branches          ItemBranch[]
    inventoryTxs      InventoryTx[]
    purchaseRequestItems PurchaseRequestItem[]
    purchaseOrderItems PurchaseOrderItem[]
    
    @@index([tenantId, number]) // Composite index (R2, R8)
    @@index([tenantId, isActive, type]) // For item queries
}

model ItemBranch {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    itemId            String
    siteId            String   // Site/warehouse ID
    reorderPoint      Int      @default(0)
    reorderQty        Int      @default(0)
    safetyStock       Int      @default(0)
    leadTimeDays      Int      @default(0)
    lotSize           Int      @default(1)
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    item              Item     @relation(fields: [itemId], references: [id])
    locations         ItemLocation[]
    
    @@unique([tenantId, itemId, siteId]) // Unique per tenant-item-site
    @@index([tenantId, siteId]) // For site-based queries
}

model ItemLocation {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    itemBranchId      String
    bin               String   // Bin location
    lotNumber         String?  // Lot number
    qtyOnHand         Int      @default(0)
    qtyCommitted      Int      @default(0)
    qtyOnOrder        Int      @default(0)
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    itemBranch        ItemBranch @relation(fields: [itemBranchId], references: [id])
    
    @@unique([tenantId, itemBranchId, bin, lotNumber]) // Unique per location
    @@index([tenantId, itemBranchId]) // For item branch queries
}

model InventoryTx {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    itemId            String
    siteId            String   // Site/warehouse ID
    location          String   // Bin location
    txType            String   // GRN|GI|ADJ|MOVE
    qty               Int      // Quantity (positive for in, negative for out)
    unitCost          Decimal  @db.Decimal(14,2) @default(0) // Money field (R8)
    refType           String?  // Reference type (PO, SO, etc.)
    refId             String?  // Reference ID
    userId            String?  // User who performed the transaction
    notes             String?
    createdAt         DateTime @default(now())
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    item              Item     @relation(fields: [itemId], references: [id])
    
    @@index([tenantId, itemId, createdAt]) // For item transaction history
    @@index([tenantId, txType, createdAt]) // For transaction type queries
    @@index([tenantId, refType, refId]) // For reference queries
}

// ========================================
// CRM
// ========================================

model Customer {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    customerNumber    String   @unique
    name              String
    type              CustomerType @default(INDIVIDUAL)
    
    // Contact information
    email             String?
    phone             String?
    address           String?
    city              String?
    state             String?
    postalCode        String?
    country           String?  @default("Indonesia")
    
    // Business information
    companyName       String?
    taxNumber         String?
    industry          String?
    
    // Status
    status            CustomerStatus @default(ACTIVE)
    source            String?  // How they found us
    notes             String?
    
    // Credit information
    creditLimit       Int      @default(0)
    currentBalance    Int      @default(0)
    
    // Version field for conflict resolution (R4)
    version           Int      @default(1)
    
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    createdBy         String?
    updatedBy         String?
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    contacts          CustomerContact[]
    orders            Order[]
    equipmentRentals  EquipmentRental[]
    
    @@index([tenantId, customerNumber]) // Composite index (R2, R8)
    @@index([tenantId, status, createdAt]) // For customer queries
}

enum CustomerType {
    INDIVIDUAL
    COMPANY
    GOVERNMENT
}

enum CustomerStatus {
    ACTIVE
    INACTIVE
    PROSPECT
    LEAD
}

model CustomerContact {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    customerId        String
    customer          Customer @relation(fields: [customerId], references: [id])
    userId            String
    user              User     @relation(fields: [userId], references: [id])
    
    contactType       ContactType
    contactDate       DateTime
    summary           String
    details           String?
    followUpDate      DateTime?
    status            ContactStatus @default(OPEN)
    
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    
    @@index([tenantId, customerId, contactDate]) // For customer contact queries
    @@index([tenantId, userId, contactDate]) // For user contact queries
}

enum ContactType {
    PHONE_CALL
    EMAIL
    MEETING
    VISIT
    OTHER
}

enum ContactStatus {
    OPEN
    IN_PROGRESS
    COMPLETED
    CANCELLED
}

// ========================================
// SALES & ORDERS (Enhanced from original)
// ========================================

model Order {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    orderNumber       String   @unique
    
    // Customer information
    customerId        String
    customer          Customer @relation(fields: [customerId], references: [id])
    
    // Order details
    orderDate         DateTime
    expectedDeliveryDate DateTime?
    deliveryDate      DateTime?
    
    subtotal          Int
    tax               Int      @default(0)
    discount          Int      @default(0)
    grandTotal        Int
    
    // Payment information
    paymentStatus     PaymentStatus @default(PENDING)
    paymentMethod     String?
    externalTransactionId String?
    paidAt            DateTime?
    
    // Order status
    status            OrderStatus @default(DRAFT)
    
    // Shipping information
    shippingAddress   String?
    shippingMethod    String?
    shippingCost      Int      @default(0)
    
    // Version field for conflict resolution (R4)
    version           Int      @default(1)
    
    // Notes and audit
    notes             String?
    createdBy         String
    creator           User     @relation("OrderCreator", fields: [createdBy], references: [id])
    approvedBy        String?
    approver          User?    @relation("OrderApprover", fields: [approvedBy], references: [id])
    
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    // orderItems removed - no inventory module
    
    @@index([tenantId, orderNumber]) // Composite index (R2, R8)
    @@index([tenantId, status, orderDate]) // For order queries
    @@index([tenantId, customerId, orderDate]) // For customer order queries
}

enum OrderStatus {
    DRAFT
    CONFIRMED
    PROCESSING
    SHIPPED
    DELIVERED
    CANCELLED
    RETURNED
}

enum PaymentStatus {
    PENDING
    PARTIAL
    PAID
    REFUNDED
    VOID
}

// OrderItem model removed - no inventory module

// ========================================
// OFFLINE SYNC SUPPORT
// ========================================

model SyncLog {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    entityType        String   // User, Product, Order, etc.
    entityId          String
    action            String   // CREATE, UPDATE, DELETE
    data              Json     // The actual data
    deviceId          String?  // For offline sync
    syncStatus        SyncStatus @default(PENDING)
    syncAttempts      Int      @default(0)
    lastSyncAttempt   DateTime?
    errorMessage      String?
    
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    
    @@index([tenantId, syncStatus, createdAt]) // For sync processing
    @@index([tenantId, deviceId, createdAt]) // For device sync queries
}

enum SyncStatus {
    PENDING
    SYNCED
    FAILED
    CONFLICT
}

// ========================================
// LEGACY SUPPORT (keeping original models)
// ========================================

model Post {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    name              String
    createdAt         DateTime @default(now())
    
    createdBy         String
    creator           User     @relation(fields: [createdBy], references: [id])
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    
    @@index([tenantId, createdAt]) // For tenant-scoped post queries
}

// ========================================
// NOTIFICATION SYSTEM (P1 - Core Platform)
// ========================================

model Notification {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    type              String   // 'info', 'warning', 'error', 'success'
    title             String
    message           String
    userId            String?  // null for global notifications
    data              Json?    // Additional notification data
    read              Boolean  @default(false)
    createdAt         DateTime @default(now())
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    user              User?    @relation(fields: [userId], references: [id])
    
    @@index([tenantId, userId, read, createdAt]) // For efficient queries
}

// ========================================
// SYSTEM CONFIGURATION (P1 - Core Platform)
// ========================================

model SystemConfig {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    key               String   // Configuration key
    value             String   // Configuration value (stored as string)
    type              String   // 'string', 'number', 'boolean', 'json'
    description       String?  // Configuration description
    isPublic          Boolean  @default(false) // Whether config is public
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    
    @@unique([tenantId, key]) // Unique key per tenant
    @@index([tenantId, isPublic]) // For efficient queries
}

// ========================================
// PURCHASE MANAGEMENT (P1 - Inventory Module)
// ========================================

model PurchaseRequest {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    prNumber          String   @unique // Purchase Request Number
    title             String
    description       String?
    requestedBy       String   // User ID who requested
    departmentId      String?  // Department requesting
    priority          Priority @default(MEDIUM)
    status            PRStatus @default(DRAFT)
    requestedDate     DateTime @default(now())
    requiredDate      DateTime?
    approvedBy        String?  // User ID who approved
    approvedDate      DateTime?
    totalAmount       Decimal  @db.Decimal(14,2) @default(0)
    
    // Version field for conflict resolution (R4)
    version           Int      @default(1)
    
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    createdBy         String?
    updatedBy         String?
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    requester         User     @relation("PurchaseRequestRequester", fields: [requestedBy], references: [id])
    department        Department? @relation(fields: [departmentId], references: [id])
    approver          User?    @relation("PurchaseRequestApprover", fields: [approvedBy], references: [id])
    items             PurchaseRequestItem[]
    purchaseOrders    PurchaseOrder[]
    
    @@index([tenantId, prNumber]) // Composite index (R2, R8)
    @@index([tenantId, status, createdAt]) // For PR queries
}

model PurchaseRequestItem {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    prId              String
    purchaseRequest   PurchaseRequest @relation(fields: [prId], references: [id])
    itemId            String
    item              Item     @relation(fields: [itemId], references: [id])
    
    quantity          Int
    unitPrice         Decimal  @db.Decimal(14,2) @default(0)
    totalPrice        Decimal  @db.Decimal(14,2) @default(0)
    description       String?
    specifications    String?
    
    // Version field for conflict resolution (R4)
    version           Int      @default(1)
    
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    
    @@index([tenantId, prId]) // For PR item queries
    @@index([tenantId, itemId]) // For item queries
}

model PurchaseOrder {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    poNumber          String   @unique // Purchase Order Number
    prId              String?  // Reference to Purchase Request
    purchaseRequest   PurchaseRequest? @relation(fields: [prId], references: [id])
    
    supplierId        String?  // Supplier ID (if we have supplier model)
    supplierName      String?  // Supplier name
    supplierAddress   String?  // Supplier address
    
    status            POStatus @default(DRAFT)
    orderDate         DateTime @default(now())
    expectedDate      DateTime?
    receivedDate      DateTime?
    
    subtotal          Decimal  @db.Decimal(14,2) @default(0)
    taxAmount         Decimal  @db.Decimal(14,2) @default(0)
    totalAmount       Decimal  @db.Decimal(14,2) @default(0)
    
    notes             String?
    
    // Version field for conflict resolution (R4)
    version           Int      @default(1)
    
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    createdBy         String?
    updatedBy         String?
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    creator           User?    @relation("PurchaseOrderCreator", fields: [createdBy], references: [id])
    updater           User?    @relation("PurchaseOrderUpdater", fields: [updatedBy], references: [id])
    items             PurchaseOrderItem[]
    
    @@index([tenantId, poNumber]) // Composite index (R2, R8)
    @@index([tenantId, status, createdAt]) // For PO queries
}

model PurchaseOrderItem {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    poId              String
    purchaseOrder     PurchaseOrder @relation(fields: [poId], references: [id])
    itemId            String
    item              Item     @relation(fields: [itemId], references: [id])
    
    quantity          Int
    unitPrice         Decimal  @db.Decimal(14,2) @default(0)
    totalPrice        Decimal  @db.Decimal(14,2) @default(0)
    receivedQuantity  Int      @default(0)
    
    // Version field for conflict resolution (R4)
    version           Int      @default(1)
    
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    
    @@index([tenantId, poId]) // For PO item queries
    @@index([tenantId, itemId]) // For item queries
}

// ========================================
// ENUMS FOR PURCHASE MANAGEMENT
// ========================================

enum Priority {
    LOW
    MEDIUM
    HIGH
    URGENT
}

enum PRStatus {
    DRAFT
    SUBMITTED
    APPROVED
    REJECTED
    CANCELLED
    CONVERTED_TO_PO
}

enum POStatus {
    DRAFT
    SENT
    ACKNOWLEDGED
    PARTIALLY_RECEIVED
    RECEIVED
    CANCELLED
    CLOSED
}