// This is your Prisma schema file for NextGen ERP System
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Updated for P1: Core Platform & Offline Backbone

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL") // untuk query
    directUrl = env("DIRECT_URL") // untuk sync ke db supabase (optional)
}

// ========================================
// CORE SYSTEM & SECURITY (P1 - Multi-tenant)
// ========================================

model Tenant {
    id                String   @id @default(uuid())
    name              String
    code              String   @unique
    domain            String?  @unique
    isActive          Boolean  @default(true)
    settings          Json?    // Tenant-specific settings
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    
    // Relations
    users             User[]
    auditEvents       AuditEvent[]
    outboxEvents      OutboxEvent[]
    idempotencyLogs   IdempotencyLog[]
    equipment         Equipment[]
    usageLogs         UsageLog[]
    breakdowns        Breakdown[]
    workOrders        WorkOrder[]
    items             Item[]
    itemBranches      ItemBranch[]
    itemLocations     ItemLocation[]
    inventoryTxs      InventoryTx[]
    customers         Customer[]
    orders            Order[]
    customerContacts  CustomerContact[]
    syncLogs          SyncLog[]
    posts             Post[]
    notifications     Notification[]
    systemConfigs     SystemConfig[]
    purchaseRequests  PurchaseRequest[]
    purchaseRequestItems PurchaseRequestItem[]
    purchaseOrders    PurchaseOrder[]
    purchaseOrderItems PurchaseOrderItem[]
}

model User {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    clerkId           String   @unique // External Clerk ID
    email             String   @unique
    firstName         String
    lastName          String
    phone             String?
    avatar            String?
    isActive          Boolean  @default(true)
    lastLoginAt       DateTime?
    
    // Version field for conflict resolution (R4)
    version           Int      @default(1)
    
    // Role-based access control
    roleId            String
    role              Role     @relation(fields: [roleId], references: [id])
    
    // Department assignment
    departmentId      String?
    department        Department? @relation(fields: [departmentId], references: [id])
    
    // Audit fields
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    createdBy         String?
    updatedBy         String?
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    posts             Post[]
    auditEvents       AuditEvent[]
    createdOrders     Order[]  @relation("OrderCreator")
    approvedOrders    Order[]  @relation("OrderApprover")
    customerContacts  CustomerContact[]
    notifications     Notification[]
    purchaseRequests  PurchaseRequest[] @relation("PurchaseRequestRequester")
    approvedPurchaseRequests PurchaseRequest[] @relation("PurchaseRequestApprover")
    createdPurchaseOrders PurchaseOrder[] @relation("PurchaseOrderCreator")
    updatedPurchaseOrders PurchaseOrder[] @relation("PurchaseOrderUpdater")
    
    @@index([tenantId, email]) // Composite index (R2, R8)
    @@index([tenantId, isActive, createdAt]) // For tenant-scoped queries
}

model Role {
    id                String   @id @default(uuid())
    name              String   @unique
    description       String?
    permissions       Json     // Array of permission strings
    isActive          Boolean  @default(true)
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    
    // Relations
    users             User[]
}

model Department {
    id                String   @id @default(uuid())
    name              String   @unique
    code              String   @unique
    description       String?
    managerId         String?
    isActive          Boolean  @default(true)
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    
    // Relations
    users             User[]
    purchaseRequests  PurchaseRequest[]
}

// ========================================
// AUDIT & EVENT SOURCING (P1 - Append-only)
// ========================================

model AuditEvent {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    actorId           String?  // User who performed the action
    entity            String   // Entity type (User, Order, etc.)
    entityId          String   // Entity ID
    action            String   // created|updated|deleted|approved|posted|...
    changes           Json?    // Old/new values
    createdAt         DateTime @default(now())
    hash              String   // Tamper-evidence (R12)
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    actor             User?    @relation(fields: [actorId], references: [id])
    
    @@index([tenantId, createdAt]) // For tenant-scoped audit queries
    @@index([tenantId, entity, entityId]) // For entity-specific audit
}

// ========================================
// OUTBOX PATTERN (P1 - Event Sourcing)
// ========================================

model OutboxEvent {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    type              String   // Event type (e.g., "user.created", "order.updated")
    entity            String   // Entity type
    entityId          String   // Entity ID
    version           Int      // Entity version for ordering
    payload           Json     // Event payload
    createdAt         DateTime @default(now())
    delivered         Boolean  @default(false) // Delivery status
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    
    @@index([tenantId, delivered, createdAt]) // For delivery processing
    @@index([tenantId, type, createdAt]) // For event type queries
}

// ========================================
// IDEMPOTENCY (P1 - R4)
// ========================================

model IdempotencyLog {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    key               String   // Idempotency key
    hash              String   // Request hash for deduplication
    result            Json?    // Stored result
    committedAt       DateTime @default(now())
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    
    @@unique([tenantId, key]) // Unique per tenant
    @@index([tenantId, committedAt]) // For cleanup
}

// ========================================
// OPERATIONS (P1 - Equipment & Usage)
// ========================================

model Equipment {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    code              String   @unique
    type              String   // Equipment type
    description       String?
    currentSiteId     String?  // Current location
    acquisitionCost   Decimal  @db.Decimal(14,2) // Money field (R8)
    currentValue      Decimal  @db.Decimal(14,2) // Money field (R8)
    isActive          Boolean  @default(true)
    
    // Version field for conflict resolution (R4)
    version           Int      @default(1)
    
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    usageLogs         UsageLog[]
    breakdowns        Breakdown[]
    workOrders        WorkOrder[]
    
    @@index([tenantId, code]) // Composite index (R2, R8)
    @@index([tenantId, isActive, type]) // For equipment queries
}

model UsageLog {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    equipmentId       String
    shiftDate         DateTime
    hoursUsed         Decimal  @db.Decimal(8,2) // Usage hours
    loadUnits         Decimal  @db.Decimal(8,2) @default(0) // Load units
    operatorId        String?  // Operator user ID
    notes             String?
    createdAt         DateTime @default(now())
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    equipment         Equipment @relation(fields: [equipmentId], references: [id])
    
    @@index([tenantId, equipmentId, shiftDate]) // For equipment usage queries
    @@index([tenantId, shiftDate]) // For date-based queries
}

model Breakdown {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    equipmentId       String
    startAt           DateTime
    endAt             DateTime?
    reason            String?
    notes             String?
    reportedBy        String?  // User who reported
    resolvedBy        String?  // User who resolved
    createdAt         DateTime @default(now())
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    equipment         Equipment @relation(fields: [equipmentId], references: [id])
    
    @@index([tenantId, equipmentId, startAt]) // For equipment breakdown queries
    @@index([tenantId, startAt]) // For date-based breakdown queries
}

model WorkOrder {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    equipmentId       String
    type              String   // preventive|corrective|emergency
    status            String   // planned|released|in_progress|completed|canceled
    scheduledDate     DateTime?
    estimatedCost     Decimal  @db.Decimal(14,2) @default(0) // Money field (R8)
    actualCost        Decimal  @db.Decimal(14,2) @default(0) // Money field (R8)
    description       String?
    assignedTo        String?  // Assigned user ID
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    equipment         Equipment @relation(fields: [equipmentId], references: [id])
    
    @@index([tenantId, equipmentId, status]) // For equipment work order queries
    @@index([tenantId, status, scheduledDate]) // For work order scheduling
}

// ========================================
// INVENTORY (P1 - Item Master & Transactions)
// ========================================

model Item {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    number            String   @unique // Item number
    description       String
    type              String   // Item type
    stdCost           Decimal  @db.Decimal(14,2) @default(0) // Money field (R8)
    lastCost          Decimal  @db.Decimal(14,2) @default(0) // Money field (R8)
    avgCost           Decimal  @db.Decimal(14,2) @default(0) // Money field (R8)
    isActive          Boolean  @default(true)
    
    // Version field for conflict resolution (R4)
    version           Int      @default(1)
    
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    branches          ItemBranch[]
    inventoryTxs      InventoryTx[]
    purchaseRequestItems PurchaseRequestItem[]
    purchaseOrderItems PurchaseOrderItem[]
    
    @@index([tenantId, number]) // Composite index (R2, R8)
    @@index([tenantId, isActive, type]) // For item queries
}

model ItemBranch {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    itemId            String
    siteId            String   // Site/warehouse ID
    reorderPoint      Int      @default(0)
    reorderQty        Int      @default(0)
    safetyStock       Int      @default(0)
    leadTimeDays      Int      @default(0)
    lotSize           Int      @default(1)
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    item              Item     @relation(fields: [itemId], references: [id])
    locations         ItemLocation[]
    
    @@unique([tenantId, itemId, siteId]) // Unique per tenant-item-site
    @@index([tenantId, siteId]) // For site-based queries
}

model ItemLocation {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    itemBranchId      String
    bin               String   // Bin location
    lotNumber         String?  // Lot number
    qtyOnHand         Int      @default(0)
    qtyCommitted      Int      @default(0)
    qtyOnOrder        Int      @default(0)
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    itemBranch        ItemBranch @relation(fields: [itemBranchId], references: [id])
    
    @@unique([tenantId, itemBranchId, bin, lotNumber]) // Unique per location
    @@index([tenantId, itemBranchId]) // For item branch queries
}

model InventoryTx {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    itemId            String
    siteId            String   // Site/warehouse ID
    location          String   // Bin location
    txType            String   // GRN|GI|ADJ|MOVE
    qty               Int      // Quantity (positive for in, negative for out)
    unitCost          Decimal  @db.Decimal(14,2) @default(0) // Money field (R8)
    refType           String?  // Reference type (PO, SO, etc.)
    refId             String?  // Reference ID
    userId            String?  // User who performed the transaction
    notes             String?
    createdAt         DateTime @default(now())
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    item              Item     @relation(fields: [itemId], references: [id])
    
    @@index([tenantId, itemId, createdAt]) // For item transaction history
    @@index([tenantId, txType, createdAt]) // For transaction type queries
    @@index([tenantId, refType, refId]) // For reference queries
}

// ========================================
// CRM
// ========================================

model Customer {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    customerNumber    String   @unique
    name              String
    type              CustomerType @default(INDIVIDUAL)
    
    // Contact information
    email             String?
    phone             String?
    address           String?
    city              String?
    state             String?
    postalCode        String?
    country           String?  @default("Indonesia")
    
    // Business information
    companyName       String?
    taxNumber         String?
    industry          String?
    
    // Status
    status            CustomerStatus @default(ACTIVE)
    source            String?  // How they found us
    notes             String?
    
    // Credit information
    creditLimit       Int      @default(0)
    currentBalance    Int      @default(0)
    
    // Version field for conflict resolution (R4)
    version           Int      @default(1)
    
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    createdBy         String?
    updatedBy         String?
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    contacts          CustomerContact[]
    orders            Order[]
    
    @@index([tenantId, customerNumber]) // Composite index (R2, R8)
    @@index([tenantId, status, createdAt]) // For customer queries
}

enum CustomerType {
    INDIVIDUAL
    COMPANY
    GOVERNMENT
}

enum CustomerStatus {
    ACTIVE
    INACTIVE
    PROSPECT
    LEAD
}

model CustomerContact {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    customerId        String
    customer          Customer @relation(fields: [customerId], references: [id])
    userId            String
    user              User     @relation(fields: [userId], references: [id])
    
    contactType       ContactType
    contactDate       DateTime
    summary           String
    details           String?
    followUpDate      DateTime?
    status            ContactStatus @default(OPEN)
    
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    
    @@index([tenantId, customerId, contactDate]) // For customer contact queries
    @@index([tenantId, userId, contactDate]) // For user contact queries
}

enum ContactType {
    PHONE_CALL
    EMAIL
    MEETING
    VISIT
    OTHER
}

enum ContactStatus {
    OPEN
    IN_PROGRESS
    COMPLETED
    CANCELLED
}

// ========================================
// SALES & ORDERS (Enhanced from original)
// ========================================

model Order {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    orderNumber       String   @unique
    
    // Customer information
    customerId        String
    customer          Customer @relation(fields: [customerId], references: [id])
    
    // Order details
    orderDate         DateTime
    expectedDeliveryDate DateTime?
    deliveryDate      DateTime?
    
    subtotal          Int
    tax               Int      @default(0)
    discount          Int      @default(0)
    grandTotal        Int
    
    // Payment information
    paymentStatus     PaymentStatus @default(PENDING)
    paymentMethod     String?
    externalTransactionId String?
    paidAt            DateTime?
    
    // Order status
    status            OrderStatus @default(DRAFT)
    
    // Shipping information
    shippingAddress   String?
    shippingMethod    String?
    shippingCost      Int      @default(0)
    
    // Version field for conflict resolution (R4)
    version           Int      @default(1)
    
    // Notes and audit
    notes             String?
    createdBy         String
    creator           User     @relation("OrderCreator", fields: [createdBy], references: [id])
    approvedBy        String?
    approver          User?    @relation("OrderApprover", fields: [approvedBy], references: [id])
    
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    // orderItems removed - no inventory module
    
    @@index([tenantId, orderNumber]) // Composite index (R2, R8)
    @@index([tenantId, status, orderDate]) // For order queries
    @@index([tenantId, customerId, orderDate]) // For customer order queries
}

enum OrderStatus {
    DRAFT
    CONFIRMED
    PROCESSING
    SHIPPED
    DELIVERED
    CANCELLED
    RETURNED
}

enum PaymentStatus {
    PENDING
    PARTIAL
    PAID
    REFUNDED
    VOID
}

// OrderItem model removed - no inventory module

// ========================================
// OFFLINE SYNC SUPPORT
// ========================================

model SyncLog {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    entityType        String   // User, Product, Order, etc.
    entityId          String
    action            String   // CREATE, UPDATE, DELETE
    data              Json     // The actual data
    deviceId          String?  // For offline sync
    syncStatus        SyncStatus @default(PENDING)
    syncAttempts      Int      @default(0)
    lastSyncAttempt   DateTime?
    errorMessage      String?
    
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    
    @@index([tenantId, syncStatus, createdAt]) // For sync processing
    @@index([tenantId, deviceId, createdAt]) // For device sync queries
}

enum SyncStatus {
    PENDING
    SYNCED
    FAILED
    CONFLICT
}

// ========================================
// LEGACY SUPPORT (keeping original models)
// ========================================

model Post {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    name              String
    createdAt         DateTime @default(now())
    
    createdBy         String
    creator           User     @relation(fields: [createdBy], references: [id])
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    
    @@index([tenantId, createdAt]) // For tenant-scoped post queries
}

// ========================================
// NOTIFICATION SYSTEM (P1 - Core Platform)
// ========================================

model Notification {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    type              String   // 'info', 'warning', 'error', 'success'
    title             String
    message           String
    userId            String?  // null for global notifications
    data              Json?    // Additional notification data
    read              Boolean  @default(false)
    createdAt         DateTime @default(now())
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    user              User?    @relation(fields: [userId], references: [id])
    
    @@index([tenantId, userId, read, createdAt]) // For efficient queries
}

// ========================================
// SYSTEM CONFIGURATION (P1 - Core Platform)
// ========================================

model SystemConfig {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    key               String   // Configuration key
    value             String   // Configuration value (stored as string)
    type              String   // 'string', 'number', 'boolean', 'json'
    description       String?  // Configuration description
    isPublic          Boolean  @default(false) // Whether config is public
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    
    @@unique([tenantId, key]) // Unique key per tenant
    @@index([tenantId, isPublic]) // For efficient queries
}

// ========================================
// PURCHASE MANAGEMENT (P1 - Inventory Module)
// ========================================

model PurchaseRequest {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    prNumber          String   @unique // Purchase Request Number
    title             String
    description       String?
    requestedBy       String   // User ID who requested
    departmentId      String?  // Department requesting
    priority          Priority @default(MEDIUM)
    status            PRStatus @default(DRAFT)
    requestedDate     DateTime @default(now())
    requiredDate      DateTime?
    approvedBy        String?  // User ID who approved
    approvedDate      DateTime?
    totalAmount       Decimal  @db.Decimal(14,2) @default(0)
    
    // Version field for conflict resolution (R4)
    version           Int      @default(1)
    
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    createdBy         String?
    updatedBy         String?
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    requester         User     @relation("PurchaseRequestRequester", fields: [requestedBy], references: [id])
    department        Department? @relation(fields: [departmentId], references: [id])
    approver          User?    @relation("PurchaseRequestApprover", fields: [approvedBy], references: [id])
    items             PurchaseRequestItem[]
    purchaseOrders    PurchaseOrder[]
    
    @@index([tenantId, prNumber]) // Composite index (R2, R8)
    @@index([tenantId, status, createdAt]) // For PR queries
}

model PurchaseRequestItem {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    prId              String
    purchaseRequest   PurchaseRequest @relation(fields: [prId], references: [id])
    itemId            String
    item              Item     @relation(fields: [itemId], references: [id])
    
    quantity          Int
    unitPrice         Decimal  @db.Decimal(14,2) @default(0)
    totalPrice        Decimal  @db.Decimal(14,2) @default(0)
    description       String?
    specifications    String?
    
    // Version field for conflict resolution (R4)
    version           Int      @default(1)
    
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    
    @@index([tenantId, prId]) // For PR item queries
    @@index([tenantId, itemId]) // For item queries
}

model PurchaseOrder {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    poNumber          String   @unique // Purchase Order Number
    prId              String?  // Reference to Purchase Request
    purchaseRequest   PurchaseRequest? @relation(fields: [prId], references: [id])
    
    supplierId        String?  // Supplier ID (if we have supplier model)
    supplierName      String?  // Supplier name
    supplierAddress   String?  // Supplier address
    
    status            POStatus @default(DRAFT)
    orderDate         DateTime @default(now())
    expectedDate      DateTime?
    receivedDate      DateTime?
    
    subtotal          Decimal  @db.Decimal(14,2) @default(0)
    taxAmount         Decimal  @db.Decimal(14,2) @default(0)
    totalAmount       Decimal  @db.Decimal(14,2) @default(0)
    
    notes             String?
    
    // Version field for conflict resolution (R4)
    version           Int      @default(1)
    
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    createdBy         String?
    updatedBy         String?
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    creator           User?    @relation("PurchaseOrderCreator", fields: [createdBy], references: [id])
    updater           User?    @relation("PurchaseOrderUpdater", fields: [updatedBy], references: [id])
    items             PurchaseOrderItem[]
    
    @@index([tenantId, poNumber]) // Composite index (R2, R8)
    @@index([tenantId, status, createdAt]) // For PO queries
}

model PurchaseOrderItem {
    id                String   @id @default(uuid())
    tenantId          String   // Multi-tenant support (R2)
    poId              String
    purchaseOrder     PurchaseOrder @relation(fields: [poId], references: [id])
    itemId            String
    item              Item     @relation(fields: [itemId], references: [id])
    
    quantity          Int
    unitPrice         Decimal  @db.Decimal(14,2) @default(0)
    totalPrice        Decimal  @db.Decimal(14,2) @default(0)
    receivedQuantity  Int      @default(0)
    
    // Version field for conflict resolution (R4)
    version           Int      @default(1)
    
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    
    // Relations
    tenant            Tenant   @relation(fields: [tenantId], references: [id])
    
    @@index([tenantId, poId]) // For PO item queries
    @@index([tenantId, itemId]) // For item queries
}

// ========================================
// ENUMS FOR PURCHASE MANAGEMENT
// ========================================

enum Priority {
    LOW
    MEDIUM
    HIGH
    URGENT
}

enum PRStatus {
    DRAFT
    SUBMITTED
    APPROVED
    REJECTED
    CANCELLED
    CONVERTED_TO_PO
}

enum POStatus {
    DRAFT
    SENT
    ACKNOWLEDGED
    PARTIALLY_RECEIVED
    RECEIVED
    CANCELLED
    CLOSED
}